name: Deploy Go Bot Database Migrations, Build and Push Docker Image

on:
  push:
    branches: [ "main" ]

jobs:
  image: 
    permissions: write-all     # <- needed to push to container registry
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Set short SHA
        id: vars
        run: echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ vars.AWS_ECR_URI }}:latest
            ${{ vars.AWS_ECR_URI }}:sha-${{ github.sha }}
  migrate:
    runs-on: ubuntu-latest
    needs: image   # <--- wait for image job to succeed
    environment: production
    env:
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ vars.DB_HOST }}
        DB_PORT: ${{ vars.DB_PORT }}
        DB_NAME: ${{ vars.DB_NAME }}
    steps:
      - uses: actions/checkout@v3

      - name: Debug environment
        run: |
          echo "Current directory: $(pwd)"
          echo "DB_HOST: $DB_HOST"
          echo "DB_PORT: $DB_PORT"

      - name: Run DB migrations
        run: |
          make migrate-up
  # lambda:
  #   runs-on: ubuntu-latest
  #   # needs: [image, migrate]
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ vars.AWS_REGION }}

  #     - name: Update Lambda with new image
  #       # update lambda to use the latest image
  #       run: |
  #         aws lambda update-function-code \
  #           --function-name ${{ vars.LAMBDA_FUNCTION_NAME }} \
  #           --image-uri ${{ vars.AWS_ECR_URI }}:latest

  #     - name: Wait for Lambda update
  #       run: aws lambda wait function-updated --function-name ${{ vars.LAMBDA_FUNCTION_NAME }}

  #     - name: Update Lambda environment variables
  #       run: |
  #         aws lambda update-function-configuration \
  #           --function-name ${{ vars.LAMBDA_FUNCTION_NAME }} \
  #           --environment "Variables={PORT='${{ vars.APP_PORT }}',DB_HOST='${{ vars.DB_HOST }}',DB_USER='${{ secrets.DB_USER }}',DB_PASSWORD='${{ secrets.DB_PASSWORD }}',DB_NAME='${{ vars.DB_NAME }}'}"
            



